#!/usr/bin/env python3

# Usage: ./workbench --config config.yml

import os
import sys
import json
import argparse
import csv
import mimetypes
import requests
from ruamel.yaml import YAML

parser = argparse.ArgumentParser()
parser.add_argument(
    "--config",
    help="Drupal filesystem to use")


def set_config_defaults():
    args = parser.parse_args()
    yaml = YAML()
    config_file_contents = open(args.config).read()
    config_data = yaml.load(config_file_contents)

    config = {}
    for k, v in config_data.items():
        config[k] = v

    return config


config = set_config_defaults()

def create():
    input_csv = os.path.join(config['input_dir'], config['input_csv'])

    mimetypes.init()
    # TIFFs and JP2s are 'file'.
    image_mimetypes = ['image/jpeg', 'image/png', 'image/gif']
    audio_mimetypes = ['audio/mpeg3', 'audio/wav', 'audio/aac']
    video_mimetypes = ['video/mp4']

    if os.path.exists(input_csv):
        field_definitions = get_field_definitions()
        with open(input_csv) as csvfile:
            csv_data = csv.DictReader(csvfile, delimiter=config['delimiter'])
            csv_column_headers = csv_data.fieldnames

            node_endpoint = config['host'] + '/node?_format=json'

            for row in csv_data:
                # Add required fields.
                node = {
                    'type': [
                        {'target_id': 'islandora_object',
                         'target_type': 'node_type'}
                    ],
                    'title': [
                        {'value': row['title']}
                    ],
                    'field_model': [
                        {'target_id': str(config['model_tid']),
                         'target_type': 'taxonomy_term'}
                    ]
                }

                # Add custom (non-required) fields.
                required_fields = ['file', 'title', 'field_model']
                custom_fields = list(
                    set(csv_column_headers)-set(required_fields))
                for custom_field in custom_fields:
                    node[custom_field] = {'value': row[custom_field]}

                node_headers = {
                    'Content-Type': 'application/json'
                }
                node_response = requests.post(
                    node_endpoint,
                    auth=(config['username'], config['password']),
                    json=node, headers=node_headers)
                node_uri = node_response.headers['location']
                if node_response.status_code == 201:
                    print("Node for '" + row['title'] +
                          "' created at " + node_uri + ".")

                file_path = os.path.join(config['input_dir'], row['file'])
                mimetype = mimetypes.guess_type(file_path)
                media_type = 'file'
                if mimetype[0] in image_mimetypes:
                    media_type = 'image'
                if mimetype[0] in audio_mimetypes:
                    media_type = 'audio'
                if mimetype[0] in video_mimetypes:
                    media_type = 'video'

                if node_response.status_code == 201:
                    media_endpoint_path = ('/media/' +
                                           media_type +
                                           '/' + str(config['media_use_tid']))
                    media_endpoint = node_uri + media_endpoint_path
                    location = config['drupal_filesystem'] + os.path.basename(row['file'])
                    media_headers = {
                        'Content-Type': mimetype[0],
                        'Content-Location': location
                    }
                    binary_data = open(os.path.join(
                        config['input_dir'], row['file']), 'rb')
                    media_response = requests.put(
                        media_endpoint,
                        auth=(config['username'], config['password']),
                        data=binary_data,
                        headers=media_headers)
                    allowed_binary_response_codes = [201, 204]
                    if media_response.status_code in allowed_binary_response_codes:
                        print('+' + media_type.title() + " media for " +
                              row['file'] + " created.")


def update():
    input_csv = os.path.join(config['input_dir'], config['input_csv'])

    if os.path.exists(input_csv):
        field_definitions = get_field_definitions()
        with open(input_csv) as csvfile:
            csv_data = csv.DictReader(csvfile, delimiter=config['delimiter'])
            csv_column_headers = csv_data.fieldnames

            for row in csv_data:
                # Add the type/target_id field.
                node = {
                    'type': [
                        {'target_id': 'islandora_object'}
                    ]
                }

                # Add custom (non-required) fields.
                required_fields = ['node_id']
                custom_fields = list(
                    set(csv_column_headers)-set(required_fields))
                for custom_field in custom_fields:
                    node[custom_field] = [{'value': row[custom_field]}]

                node_endpoint = config['host'] + '/node/' + row['node_id'] + '?_format=json'
                node_headers = {
                    'Content-Type': 'application/json'
                }
                node_response = requests.patch(
                    node_endpoint,
                    auth=(config['username'], config['password']),
                    json=node, headers=node_headers)

                if node_response.status_code == 200:
                    print("Node for " + config['host'] + '/node/' +
                          row['node_id'] + " updated.")


def delete():
    input_csv = os.path.join(config['input_dir'], config['input_csv'])
    if os.path.exists(input_csv):
        with open(input_csv) as csvfile:
            csv_data = csv.DictReader(csvfile)
            csv_column_headers = csv_data.fieldnames

            for row in csv_data:
                node_endpoint = config['host'] + '/node/' + str(row['node_id']) + '?_format=json'
                node_response = requests.delete(
                    node_endpoint,
                    auth=(config['username'], config['password']))
                if node_response.status_code == 204:
                    print("Node " + config['host'] + '/node/' +
                          str(row['node_id']) + " deleted.")


def add_media():
    input_csv = os.path.join(config['input_dir'], config['input_csv'])

    mimetypes.init()
    # TIFFs and JP2s are 'file'.
    image_mimetypes = ['image/jpeg', 'image/png', 'image/gif']
    audio_mimetypes = ['audio/mpeg3', 'audio/wav', 'audio/aac']
    video_mimetypes = ['video/mp4']

    if os.path.exists(input_csv):
        with open(input_csv) as csvfile:
            csv_data = csv.DictReader(csvfile, delimiter=config['delimiter'])
            csv_column_headers = csv_data.fieldnames

            for row in csv_data:
                file_path = os.path.join(config['input_dir'], row['file'])
                mimetype = mimetypes.guess_type(file_path)
                media_type = 'file'
                if mimetype[0] in image_mimetypes:
                    media_type = 'image'
                if mimetype[0] in audio_mimetypes:
                    media_type = 'audio'
                if mimetype[0] in video_mimetypes:
                    media_type = 'video'

                node_json_url = config['host'] + '/node/' + row['node_id'] + '?_format=json'
                node_uri = config['host'] + '/node/' + row['node_id']
                node_response = requests.get(
                    node_json_url,
                    auth=(config['username'], config['password']))
                if node_response.status_code == 200:
                    media_endpoint_path = ('/media/' +
                                           media_type + '/' +
                                           str(config['media_use_tid']))
                    media_endpoint = node_uri + media_endpoint_path
                    location = config['drupal_filesystem'] + os.path.basename(row['file'])
                    media_headers = {
                        'Content-Type': mimetype[0],
                        'Content-Location': location
                    }
                    binary_data = open(
                        os.path.join(config['input_dir'], row['file']), 'rb')
                    media_response = requests.put(
                        media_endpoint,
                        auth=(config['username'], config['password']),
                        data=binary_data,
                        headers=media_headers)
                    allowed_binary_response_codes = [201, 204]
                    if media_response.status_code in allowed_binary_response_codes:
                        print(media_type.title() + " media for " +
                              row['file'] + " created and added to " + node_uri)

def get_field_definitions():
    field_config_url = config['host'] + '/jsonapi/field_config/field_config'
    headers = {'Content-Type': 'application/json'}
    response = requests.get(field_config_url, auth=('admin', 'islandora'), headers=headers)

    if response.status_code == 200:
        field_config = json.loads(response.text)
        field_definitions = {}
        for item in field_config['data']:
            field_name = item['attributes']['field_name']
            field_definitions[field_name] = item['attributes']['field_type']
        return field_definitions


if config['task'] == 'create':
    create()
if config['task'] == 'update':
    update()
if config['task'] == 'delete':
    delete()
if config['task'] == 'add_media':
    add_media()